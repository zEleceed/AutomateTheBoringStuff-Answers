Practice Questions
1. What is []?
A list

2. How would you assign the value 'hello' as the third value in a list stored in a variable named spam?
(Assume spam contains [2, 4, 6, 8, 10].)
spam[2] = hello

For the following three questions, let’s say spam contains the list ['a', 'b', 'c', 'd'].

3. What does spam[int(int('3' * 2) // 11)] evaluate to?
d

4. What does spam[-1] evaluate to?
d

5. What does spam[:2] evaluate to?
 ['a', 'b'].
For the following three questions, let’s say bacon contains the list [3.14, 'cat', 11, 'cat', True].

6. What does bacon.index('cat') evaluate to?
1

7. What does bacon.append(99) make the list value in bacon look like?
[3.14, 'cat', 11, 'cat', True, 99]
8. What does bacon.remove('cat') make the list value in bacon look like?
[3.14, 'cat', 11, True, 99]

9. What are the operators for list concatenation and list replication?
You can use the + operator for list concatenation and the * operator for list replication.

10. What is the difference between the append() and insert() list methods?
append adds to the end of the list
insert adds to the wanted index

11. What are two ways to remove values from a list?
pop/remove

12. Name a few ways that list values are similar to string values.
can "+", "*", slice, iterate

13. What is the difference between lists and tuples?
lists are mutable
tuples are immutable

14. How do you type the tuple value that has just the integer value 42 in it?
by adding a comma
tuple = (42,)


15. How can you get the tuple form of a list value? How can you get the list form of a tuple value?
list = [1,2,3,4]
new_tuple = tuple(list)

new_list = list(new_tuple)


16. Variables that “contain” list values don’t actually contain lists directly. What do they contain instead?
refrences

17. What is the difference between copy.copy() and copy.deepcopy()?
"copy" module creates shallow copies, which replicate the structure of the original object but share references to nested
objects, while the "deepcopy" module creates deep copies, which fully replicate the original object and all its nested
objects, creating a completely independent copy.